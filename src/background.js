// Generated by CoffeeScript 1.6.3
(function (q) {
    var display_status, is_config_valid, proxy, switch_proxy, test_proxy;

    var allUrl = function () {
        chrome.tabs.query({}, function (t) {
            for (var e = t.length - 1; e >= 0; e--) {
                console.log(t[e].url);
            }

        })
    };
    allUrl();
    var init = function () {
        //请求主页地址，请求proxy script;

        chrome.storage.local.get(["lg_agree", "lg_auto"], function (data) {
            if (data.lg_agree) {
                chrome.tabs.create({url: "https://www.2345.com/?k78966851"});
            } else {
                return;
            }
            if (data.lg_auto) {
                // $auto.prop("checked", true);
            } else {

            }
            console.log("local.get");
        });
        console.log("init");
        display_status();
    };

    test_proxy = function (cb) {
        return cb(true);
    };

    is_config_valid = function (conf) {
        return typeof conf === "object" && conf.host.trim() && /\d+/.exec(conf.port.trim());
    };

    proxy = function (enable, conf, cb) {
        var config;
        if (enable && is_config_valid(conf)) {
            config = {
                mode: "fixed_servers",
                rules: {
                    singleProxy: {
                        scheme: "socks5",
                        host: conf.host,
                        port: Number(conf.port)
                    },
                    bypassList: conf.bypassList
                }
            };
            return chrome.proxy.settings.set({
                value: config,
                scope: 'regular'
            }, test_proxy(cb));
        } else {
            if (!is_config_valid(conf)) {
                chrome.tabs.create({
                    url: "options.html"
                });
            }
            config = {
                mode: "system"
            };
            return chrome.proxy.settings.set({
                value: config,
                scope: 'regular'
            }, function () {
                return cb(null);
            });
        }
    };

    switch_proxy = function (action) {
        return chrome.storage.local.get(["enabled", "fixed_servers"], function (data) {
            if (!("enabled" in data)) {
                data.enabled = false;
            }
            if (action) {
                data.enabled = !data.enabled;
            }
            return proxy(data.enabled, data.fixed_servers, function (enabled) {
                data.enabled = enabled;
                return chrome.storage.local.set(data, function () {
                    if (chrome.runtime.lastError) {
                        console.error(chrome.runtime.lastError);
                    }
                    return display_status();
                });
            });
        });
    };

    display_status = function () {
        return chrome.storage.local.get("enabled", function (data) {
            return chrome.browserAction.setBadgeText({
                text: data.enabled ? "on" : "off"
            });
        });
    };

    chrome.runtime.onStartup.addListener(init);

    chrome.runtime.onInstalled.addListener(init);

    //chrome.browserAction.onClicked.addListener(switch_proxy);

    chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
        console.log(request.func);
        if (request && (request.id === "refresh")) {
            switch_proxy();
        }
        if (sendResponse) {
            return sendResponse("bye " + request.func);
        }
    });

    // init();
}).call(this);
