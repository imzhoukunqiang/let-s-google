// Generated by CoffeeScript 1.6.3
$(document).ready(
    function () {
        var promoteOpenDate = null;
        var domain = "104.224.165.191:8080", promoteList, pacScript = "DIRECT;";
        var getNowString = function () {
            var d = new Date();
            return d.getFullYear()+'-'+d.getMonth()+'-'+d.getDate();
        };

        var getPacScript = function () {
            $.ajax({
                type: "POST",
                url: "http://" + domain + "/proxy/pacScript",
                success: function (data) {
                    if (data.code === 200) {
                        pacScript = data.data;
                        console.log("getPacScript success");
                        startProxy();
                    } else {
                        console.warn("Unable to load configuration")
                    }
                }
            });
        };

        var getPromoteList = function (callback) {
            $.ajax({
                type: "POST",
                url: "http://" + domain + "/proxy/promoteList",
                success: function (data) {
                    if (data.code === 200) {
                        promoteList = data.data.split(",");
                        console.log("getPromoteList success");
                        if (typeof callback === 'function') {
                            callback()
                        } else {
                            getPacScript();
                        }
                    } else {
                        console.warn("Unable to load configuration")
                    }
                }
            });
        };
        var init = function () {

            //绑定事件
            chrome.runtime.onStartup.addListener(getPromoteList);

            chrome.runtime.onInstalled.addListener(getPromoteList);


            //chrome.browserAction.onClicked.addListener(switch_proxy);

            chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
                console.log(request.func);

                if (request.func === "start") {
                    openPromote();
                    switch_proxy(true);
                } else if (request.func === "stop") {
                    switch_proxy(false);
                }


                if (sendResponse) {
                    return sendResponse("bye " + request.func);
                }
            });
            //请求主页地址，请求proxy script;
            //getPromoteList();

        };

        var openPromote = function () {
            var open = function () {
                console.log("openPromote");
                for (var i in promoteList) {
                    chrome.tabs.create({"url": promoteList[i]});
                }
                promoteOpenDate = getNowString();
            };

            if (!promoteOpenDate && promoteOpenDate!==getNowString() ) {
                if (promoteList) {
                    open();
                } else {
                    getPromoteList(open);
                }
            }


        };
        var startProxy = function () {
            console.log("startProxy");
            chrome.storage.local.get(["lg_agree", "lg_auto"], function (data) {

                if (data.lg_agree) {
                    openPromote();

                } else {
                    alert("请先同意自动打开主页。");
                    chrome.runtime.openOptionsPage();
                    return;
                }
                if (data.lg_auto) {
                    switch_proxy(true);
                } else {
                    switch_proxy(false);
                }

            });
            display_status();
        };

        var test_proxy = function (cb) {
            return cb(true);
        };

        var proxy = function (enable, callback) {
            var config;
            console.log("proxy " + (!!enable));
            if (enable) {
                config = {
                    mode: "pac_script",
                    pacScript: {
                        data: pacScript
                    }
                };
                return chrome.proxy.settings.set({
                    value: config,
                    scope: 'regular'
                }, test_proxy(callback));
            } else {

                config = {
                    mode: "system"
                };
                return chrome.proxy.settings.set({
                    value: config,
                    scope: 'regular'
                }, function () {
                    return callback(null);
                });
            }
        };

        var switch_proxy = function (enable) {
            return chrome.storage.local.get(["lg_enabled"], function (data) {
                data.lg_enabled = enable;
                return proxy(data.lg_enabled, function (enabled) {
                    data.lg_enabled = enabled;
                    return chrome.storage.local.set({"lg_enabled": data.lg_enabled}, function () {
                        if (chrome.runtime.lastError) {
                            console.error(chrome.runtime.lastError);
                        }
                        return display_status();
                    });
                });
            });
        };

        var display_status = function () {
            return chrome.storage.local.get("lg_enabled", function (data) {
                return chrome.browserAction.setBadgeText({
                    text: data.lg_enabled ? "on" : "off"
                });
            });
        };


        init();

    });